/**
    判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。
    数字 1-9 在每一行只能出现一次。
    数字 1-9 在每一列只能出现一次。
    数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。
    上图是一个部分填充的有效的数独。
    数独部分空格内已填入了数字，空白格用 '.' 表示。
    输入:
    [
    ["5","3",".",".","7",".",".",".","."],
    ["6",".",".","1","9","5",".",".","."],
    [".","9","8",".",".",".",".","6","."],
    ["8",".",".",".","6",".",".",".","3"],
    ["4",".",".","8",".","3",".",".","1"],
    ["7",".",".",".","2",".",".",".","6"],
    [".","6",".",".",".",".","2","8","."],
    [".",".",".","4","1","9",".",".","5"],
    [".",".",".",".","8",".",".","7","9"]
    ]
    输出: true
*/
/**
 *思路：遍历数组，判断在同一行、同一列、同一3*3宫格内是否有重复数字
 *为提高计算速度，只进行一次迭代,
 *所以需要分别将每列、行、宫格内的数据保存到对象中，使用数字作为关键字
 */
/**
 * @param {character[][]} board
 * @return {boolean}
 */
var isValidSudoku = function(board) {
    var i, j, columns = [],rows = [],grids = [];
    for(i=0;i<board.length;i++){
        columns.push({});
        rows.push({});
        grids.push({});
    }
    for(i=0;i<board.length;i++){
        for(j=0;j<board[i].length;j++){
            if(board[i][j] == ".")continue;
            if(rows[i][board[i][j]] != null || columns[j][board[i][j]] != null || grids[Math.floor(i/3)*3+Math.floor(j/3)][board[i][j]]){
                return false;
            }else{
                rows[i][board[i][j]] = '1';
                columns[j][board[i][j]] = '1';
                grids[Math.floor(i/3)*3+Math.floor(j/3)][board[i][j]] = '1';
            }
        }
    }
    return true;
};
console.log(
isValidSudoku(
    [
        ["5","3",".",".","7",".",".",".","."],
        ["6",".",".","1","9","5",".",".","."],
        [".","9","8",".",".",".",".","6","."],
        ["8",".",".",".","6",".",".",".","3"],
        ["4",".",".","8",".","3",".",".","1"],
        ["7",".",".",".","2",".",".",".","6"],
        [".","6",".",".",".",".","2","8","."],
        [".",".",".","4","1","9",".",".","5"],
        [".",".",".",".","8",".",".","7","9"]
    ]
)
)
